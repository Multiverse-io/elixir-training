# Mix - the Elixir build tool

## What is Mix?

[Mix](https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html#our-first-project) is the Elixir tool that you'll use to do pretty much everything apart from writing the code.

It can...

* [Create new projects](https://hexdocs.pm/mix/1.13/Mix.Tasks.New.html)
* [Compile and run your project](https://hexdocs.pm/mix/1.13/Mix.Tasks.Run.html)
* [Run your tests](https://hexdocs.pm/mix/1.13/Mix.Tasks.Test.html)
* [Download your external dependencies](https://hexdocs.pm/mix/1.13/Mix.Tasks.Deps.Get.html)
* [Lots of other useful stuff](https://hexdocs.pm/mix/Mix.html)...

We can use Mix by running commands on the terminal.

## Creating a new project

Let's use `mix` to create a new project!

### The mix command

```shell
mix new example
```

<details>
<summary>output</summary>

mix new example
* creating README.md
* creating .formatter.exs
* creating .gitignore
* creating mix.exs
* creating lib
* creating lib/example.ex
* creating test
* creating test/test_helper.exs
* creating test/example_test.exs

Your Mix project was created successfully.
You can use "mix" to compile it, test it, and more:

    cd example
    mix test

Run "mix help" for more commands.
</details>

We now have a working project where we can write our code!

Here are the files that Mix made for us:

```
.
├── lib
│   └── example.ex
├── mix.exs
├── README.md
└── test
    ├── example_test.exs
    └── test_helper.exs
```

### So what are these files?

* The `lib` directory is for our code
* The `test` directory is for our tests
* We can put helpful info about our project in `README`
* We can configure our project in `mix.exs`

We'll cover these in more depth soon.

## Running our project

The `mix` command is also how we run our code.

Let's give it a go:

```shell
mix run
```

<details>
<summary>output</summary>
Compiling 1 file (.ex)  

Generated example app
</details>

## Running the tests

We can run the project tests using `mix`:

```shell
mix test
```

<details>
<summary>output</summary>

Finished in 0.01 seconds (0.00s async, 0.01s sync)

1 doctest, 1 test, 0 failures

Randomized with seed 249849
</details>

## Using the interactive shell

We can also start the IEx interactive shell in our project with `mix`.

This is great as it let's us call our functions manually and see what they do.

Let's give it a go:

```shell
$ iex -S mix

Erlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit]

Compiling 1 file (.ex)
Generated example app
Interactive Elixir (1.14.1) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)>
```

We can now run code from our project.

<!-- livebook:{"force_markdown":true} -->

```elixir
iex(1)> Example.hello()
:world
```

## So what else can mix do?

A **lot**!

```shell
$ mix help

mix                   # Runs the default task (current: "mix run")
mix app.config        # Configures all registered apps
mix app.start         # Starts all registered apps
mix app.tree          # Prints the application tree
mix archive           # Lists installed archives
mix archive.build     # Archives this project into a .ez file
mix archive.install   # Installs an archive locally
mix archive.uninstall # Uninstalls archives
mix clean             # Deletes generated application files
mix cmd               # Executes the given command
mix compile           # Compiles source files
mix deps              # Lists dependencies and their status
mix deps.clean        # Deletes the given dependencies' files
mix deps.compile      # Compiles dependencies
mix deps.get          # Gets all out of date dependencies
mix deps.tree         # Prints the dependency tree
mix deps.unlock       # Unlocks the given dependencies
mix deps.update       # Updates the given dependencies
mix do                # Executes the tasks separated by plus
mix escript           # Lists installed escripts
mix escript.build     # Builds an escript for the project
mix escript.install   # Installs an escript locally
mix escript.uninstall # Uninstalls escripts
mix eval              # Evaluates the given code
mix format            # Formats the given files/patterns
mix help              # Prints help information for tasks
mix hex               # Prints Hex help information
mix hex.audit         # Shows retired Hex deps for the current project
mix hex.build         # Builds a new package version locally
mix hex.config        # Reads, updates or deletes local Hex config
mix hex.docs          # Fetches or opens documentation of a package
mix hex.info          # Prints Hex information
mix hex.organization  # Manages Hex.pm organizations
mix hex.outdated      # Shows outdated Hex deps for the current project
mix hex.owner         # Manages Hex package ownership
mix hex.package       # Fetches or diffs packages
mix hex.publish       # Publishes a new package version
mix hex.registry      # Manages local Hex registries
mix hex.repo          # Manages Hex repositories
mix hex.retire        # Retires a package version
mix hex.search        # Searches for package names
mix hex.sponsor       # Show Hex packages accepting sponsorships
mix hex.user          # Manages your Hex user account
mix loadconfig        # Loads and persists the given configuration
mix local             # Lists local tasks
mix local.hex         # Installs Hex locally
mix local.phx         # Updates the Phoenix project generator locally
mix local.public_keys # Manages public keys
mix local.rebar       # Installs Rebar locally
mix new               # Creates a new Elixir project
mix phx.new           # Creates a new Phoenix v1.6.15 application
mix phx.new.ecto      # Creates a new Ecto project within an umbrella project
mix phx.new.web       # Creates a new Phoenix web project within an umbrella project
mix profile.cprof     # Profiles the given file or expression with cprof
mix profile.eprof     # Profiles the given file or expression with eprof
mix profile.fprof     # Profiles the given file or expression with fprof
mix release           # Assembles a self-contained release
mix release.init      # Generates sample files for releases
mix run               # Runs the current application
mix test              # Runs a project's tests
mix test.coverage     # Build report from exported test coverage
mix xref              # Prints cross reference information
iex -S mix            # Starts IEx and runs the default task

```
